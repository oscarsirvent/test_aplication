/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateBorrarArgs } from "./CreateBorrarArgs";
import { UpdateBorrarArgs } from "./UpdateBorrarArgs";
import { DeleteBorrarArgs } from "./DeleteBorrarArgs";
import { BorrarFindManyArgs } from "./BorrarFindManyArgs";
import { BorrarFindUniqueArgs } from "./BorrarFindUniqueArgs";
import { Borrar } from "./Borrar";
import { ProjectFindManyArgs } from "../../project/base/ProjectFindManyArgs";
import { Project } from "../../project/base/Project";
import { BorrarService } from "../borrar.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Borrar)
export class BorrarResolverBase {
  constructor(
    protected readonly service: BorrarService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Borrar",
    action: "read",
    possession: "any",
  })
  async _borrarsMeta(
    @graphql.Args() args: BorrarFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Borrar])
  @nestAccessControl.UseRoles({
    resource: "Borrar",
    action: "read",
    possession: "any",
  })
  async borrars(@graphql.Args() args: BorrarFindManyArgs): Promise<Borrar[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Borrar, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Borrar",
    action: "read",
    possession: "own",
  })
  async borrar(
    @graphql.Args() args: BorrarFindUniqueArgs
  ): Promise<Borrar | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Borrar)
  @nestAccessControl.UseRoles({
    resource: "Borrar",
    action: "create",
    possession: "any",
  })
  async createBorrar(@graphql.Args() args: CreateBorrarArgs): Promise<Borrar> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Borrar)
  @nestAccessControl.UseRoles({
    resource: "Borrar",
    action: "update",
    possession: "any",
  })
  async updateBorrar(
    @graphql.Args() args: UpdateBorrarArgs
  ): Promise<Borrar | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Borrar)
  @nestAccessControl.UseRoles({
    resource: "Borrar",
    action: "delete",
    possession: "any",
  })
  async deleteBorrar(
    @graphql.Args() args: DeleteBorrarArgs
  ): Promise<Borrar | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Project])
  @nestAccessControl.UseRoles({
    resource: "Project",
    action: "read",
    possession: "any",
  })
  async task(
    @graphql.Parent() parent: Borrar,
    @graphql.Args() args: ProjectFindManyArgs
  ): Promise<Project[]> {
    const results = await this.service.findTask(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
